debug: false
management.endpoints.web.exposure.include: "*"

logging:
  level:
    com.example.projectboardadmin: debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

server:
  port: 8081

spring:
  # Live Reload : Devtools 포트 충돌 처리
  devtools.livereload.port: 35730
  datasource:
    # mysql
    #        url: jdbc:mysql://localhost:3306/board
    #        username: jyuka
    #        password: 1234
    #        driver-class-name: com.mysql.cj.jdbc.Driver

    # postgres
    url: jdbc:postgresql://localhost:5432/board
    username: jyuka
    password: 1234

    # h2-db
  #        url: jdbc:h2:mem:testdb
  #        username: sa
  #        driver-class-name: org.h2.Driver
  jpa:
    defer-datasource-initialization: true
    hibernate.ddl-auto: create
    show-sql: true
    properties:
      hibernate.format_sql: true
      hibernate.default_batch_fetch_size: 100
    # OSIV 끔
    # 참고 URL : https://ykh6242.tistory.com/entry/JPA-OSIVOpen-Session-In-View%EC%99%80-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94
    open-in-view: false
  h2.console.enabled: false
  sql.init.mode: always
  thymeleaf3:
    decoupled-logic: true
  # OAuth2 설정
  # https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api#request-code
  # 1) 카카오 인증서버에서 로그인에 대한 인증이 완료되면 인가코드를 redirect-url로 전달한다.
  # 2) redirect-url 에서는 해당 인가코드를 가지고 사용자 정보 호출을 위한 access token 발고 이를 OAuth2UserRequest 에 저장한다.
  # 3) 이후 OAuth2UserService 에서는 OAuth2UserRequest 의 access token 으로 사용자 정보를 카카오로부터 불러와 SecurityContextHolder 에 저장한다.
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID} # REST API key
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}  # 보안 - client secret
            authorization-grant-type: authorization_code # https://oauth.net/2/grant-types/authorization-code/
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            client-authentication-method: POST
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # 인가 요청에 필요한 url(로그인 시도)
            token-uri: https://kauth.kakao.com/oauth/token # 토큰 발급에 필요한 url(로그인 성공 이후 사용자 정보 호출을 위한 access token 발급 요청)
            user-info-uri: https://kapi.kakao.com/v2/user/me # 사용자 정보를 호출할때 필요한 url(OAuth2UserService 에서 사용)
            user-name-attribute: id # 사용자 정보를 받았을 경우 response 에 있는 키워드중 식별자로 사용할 것을 지정


---
spring:
  config:
    activate:
      on-profile: testdb
  datasource:
    url: jdbc:h2:mem:board;mode=mysql
    driver-class-name: org.h2.Driver
  #    sql:
  #        init:
  #            mode: always
  #
  #    # 아레 조건에 대한 설정을 yml에서 관리
  #    # @ActiveProfiles("testdb")
  #    # @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
  #    test.database.replace: none
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: test_id # REST API key
            client-secret: test_password  # 보안 - client secret
            authorization-grant-type: authorization_code # https://oauth.net/2/grant-types/authorization-code/
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            client-authentication-method: POST
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # 인가 요청에 필요한 url(로그인 시도)
            token-uri: https://kauth.kakao.com/oauth/token # 토큰 발급에 필요한 url(로그인 성공 이후 사용자 정보 호출을 위한 access token 발급 요청)
            user-info-uri: https://kapi.kakao.com/v2/user/me # 사용자 정보를 호출할때 필요한 url(OAuth2UserService 에서 사용)
            user-name-attribute: id # 사용자 정보를 받았을 경우 response 에 있는 키워드중 식별자로 사용할 것을 지정

---
spring:
  config:
    activate:
      on-profile: testdb
  datasource:
    url: jdbc:h2:mem:board;mode=mysql
    driver-class-name: org.h2.Driver
